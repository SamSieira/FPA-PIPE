# FPA Pipeline

A modular Python pipeline for processing genomic insertion datasets, performing filtering, essentiality predictions, and generating Protinseq tables and plots. This pipeline combines preprocessing of raw genomic data, advanced ANUBIS modeling, and Protinseq summary tables with high-quality plots.

---

## Directory Structure

FPA_pipeline/
├── core/
│   ├── core_a.py            # ANUBIS filtering, TSD correction, and multiple model predictions
│   ├── core_p.py            # Protinseq table generation, insertion summaries, and plotting, prefict real orfs
│   ├── data_processor.py    # Preprocessing raw sequences, annotations, intergenic regions, and gene tables
│   └── protinseq_tools.py   # Protinseq original scripting
├── input_files/
│   ├── raw/                 # Raw input .qins, goldset, RanSeps CSV, and GenBank files
│   └── processed/           # Preprocessed files generated by data_processor.py
├── outputs/
│   ├── anubis/              # ANUBIS output (charts, plots, all_reads.dat, results)
│   └── protinseq/           # Protinseq charts and plots derived from ANUBIS output
├── main.py                  # Pipeline CLI entry point
├── config.yaml              # Pipeline configuration with all paths and sample settings
└── FPA_pipeline.log         # Log file generated during execution

---

## Installation

1. Clone the repository:

git clone <repo_url> FPA_pipeline
cd FPA_pipeline

2. Create a virtual environment and install dependencies:

python -m venv venv
source venv/bin/activate      # Linux / macOS

3. Install requirements.txt 

---

## Configuration

Edit settings in `config.yaml` to match your data sample names and genome length (in bp):

settings:
  sample_prefixes: ["A_Cm10", "B_Cm12"] #all sample names to analyze
  protinseq_samples: ["B_Cm10_fw", "B_Cm10_rv", "B_Cm30_rv", "B_Cm30_fw"] # These are the samples used for protinseq analysis (sample w/o promoters in their insertions)
  genome_size: XXXXX  #can be found on the top of the .gb file
input:
  raw: "input_files/raw"
  processed: "input_files/processed"
output:
  anubis:
    all_reads: "outputs/anubis/all_reads.dat"
    charts: "outputs/anubis/charts"
  protinseq:
    charts: "outputs/protinseq/charts"
    plots: "outputs/protinseq/plots"

---

## Usage

Place raw .qins files from FASTQINS, RanSeps file, and GenBank genome files in input_files/raw/.

Preprocess raw files:

        python main.py preprocess


Run ANUBIS modeling with optional filters:

        python main.py anubis --filter_genes --filter_tails --filter_reads

        - reads : min_value (min_value<=reads), max_value (reads<=max_value), default min_value=16
            
        - tails : lpercentile and rpercentile for reads (lp<=reads<=rp), default 5-95.
        
        - genes : Filter the dataset based on the percentile of reads mapping to a set of
                    known E genes. Ideas behind this filter implie that a gold set of E genes
                    will present mostly artefactual/background insertions and every position
                    with similar conditions cannot be trusted.
                    TO BE AWARE: usually we remove the 5% of N and C terminal regions of the
                    gene, in this case we remove the 10% of each by default to be sure we do
                    not include NE positions.
                    defaults: percentile=95, list_of_genes=Egenes, auto=False, Nterminal=10,
                            Cterminal=10, window_size=50, Nmax=10, Cmax=10

Generate Protinseq tables and plots:

        python main.py protinseq --sample A_Cm10 (sample to use as model sample for essentiality) --model Poisson_absolute

        -sample and models can be seen in results.xlsx, comparison to a gold set may be implemented

